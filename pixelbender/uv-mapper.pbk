/*
 Copyright (c) Aldo Hoeben / fieldOfView
 All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted provided that
 the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions and
	the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
	the following disclaimer in the documentation and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
*/

<languageVersion : 1.0;>
kernel uvmapper <
	namespace :		"com.fieldofview";
	vendor :		"fieldOfView";
	version:		1;
	description:	"Transform the given image by a 16bit red/green uv-map";
	displayname: 	"uv-mapper";
> {
	input image4 map; 
	input image4 texture; 
	output pixel4 result; 
	
	parameter float2 textureSize <
		aeDisplayName: "Texture size";
		aeUIControl: "aePoint";
		aePointRelativeDefaultValue: float2(1.0, 1.0);
	>;

	// Expand the region to be processed to the texture if needed
	region needed(region outputRegion, imageRef inputRef ) {
		return outset( outputRegion, textureSize );
	}

	// Convert each uv pixel into a coordinate in the source texture, 
	// and sample the color at that coordinate
	void evaluatePixel(){ 
		pixel4 uv = sampleNearest( map, outCoord() ); 
		
		result = sampleLinear( texture, uv.rg * ( textureSize - pixelSize( texture )));
		result.a *= uv.a;
	} 
} 